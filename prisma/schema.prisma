// Aplycat - AI Resume Analysis Platform
// Production-ready Prisma Schema with Credit System

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// ===== USER MANAGEMENT (Clerk Integration) =====
model User {
    id          String  @id @default(cuid())
    clerkId     String  @unique // Clerk user ID
    email       String  @unique
    firstName   String?
    lastName    String?
    imageUrl    String?
    phoneNumber String? // User's phone number for MPesa payments

    // Account status
    isActive  Boolean @default(true)
    isPremium Boolean @default(false)

    // Credits & Usage
    credits          Int @default(5) // Free credits for new users
    totalCreditsUsed Int @default(0)

    // Timestamps
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    lastActiveAt DateTime @default(now())

    // Relations
    resumes            Resume[]
    analyses           Analysis[]
    improvements       Improvement[]
    improvedResumes    ImprovedResume[]
    resumeComparisons  ResumeComparison[]
    creditTransactions CreditTransaction[]
    subscriptions      Subscription[]
    usageEvents        UsageEvent[]
    feedback           Feedback[]
    paysuitePayments   PaysuitePayment[]
    mpesaPayments      MpesaPayment[]

    // Add indexes for dashboard performance
    @@index([clerkId])
    @@index([email])
    @@index([phoneNumber])
    @@index([lastActiveAt])
    @@map("users")
}

model PaysuitePayment {
    id          String @id // PaySuite payment ID
    userId      String // Internal database user ID
    clerkUserId String // Clerk user ID for reference
    user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    // Package and payment details
    packageType String
    credits     Int
    amount      Float // Amount in MZN
    currency    String @default("MZN")
    status      String @default("pending") // pending, completed, failed

    // Payment method and reference
    paymentMethod String // mpesa, emola
    reference     String // PaySuite reference

    // Metadata and timestamps
    metadata    Json?
    createdAt   DateTime  @default(now())
    completedAt DateTime?

    @@map("paysuite_payments")
}

model WebhookEvent {
    id          String    @id @default(cuid())
    provider    String // 'stripe' | 'paysuite'
    eventId     String // Webhook event ID for idempotency
    eventType   String // Event type (payment.success, checkout.session.completed, etc.)
    processed   Boolean   @default(false)
    data        Json // Full webhook payload
    receivedAt  DateTime  @default(now())
    processedAt DateTime?

    @@unique([provider, eventId], name: "provider_eventId")
    @@map("webhook_events")
}

// ===== CREDIT SYSTEM =====
model CreditTransaction {
    id     String @id @default(cuid())
    userId String

    // Transaction details
    type        CreditTransactionType
    amount      Int // Positive for additions, negative for deductions
    description String

    // Context
    relatedAnalysisId       String? // If credit used for analysis
    relatedImprovementId    String? // If credit used for improvement
    relatedImprovedResumeId String? // If credit used for improved resume

    // Timestamps
    createdAt DateTime @default(now())

    // Relations
    user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    analysis       Analysis?       @relation(fields: [relatedAnalysisId], references: [id])
    improvement    Improvement?    @relation(fields: [relatedImprovementId], references: [id])
    improvedResume ImprovedResume? @relation(fields: [relatedImprovedResumeId], references: [id])

    @@index([userId, createdAt(sort: Desc)])
    @@index([type, createdAt(sort: Desc)])
    @@map("credit_transactions")
}

enum CreditTransactionType {
    PURCHASE
    SUBSCRIPTION_CREDIT
    ANALYSIS_USE
    IMPROVEMENT_USE
    BONUS_CREDIT
    REFUND
}

// ===== RESUME & FILE MANAGEMENT =====
model Resume {
    id     String @id @default(cuid())
    userId String

    // File details
    fileName String
    fileUrl  String // UploadThing URL
    fileSize Int? // File size in bytes
    mimeType String?

    // Metadata
    title       String? // User-defined title
    description String?

    // Status
    isActive Boolean @default(true)

    // Timestamps
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
    analyses          Analysis[]
    improvements      Improvement[]
    improvedResumes   ImprovedResume[]
    resumeComparisons ResumeComparison[]

    // Critical indexes for dashboard performance
    @@index([userId, isActive, createdAt(sort: Desc)])
    @@index([userId, createdAt(sort: Desc)])
    @@map("resumes")
}

// ===== ANALYSIS RESULTS =====
model Analysis {
    id       String @id @default(cuid())
    userId   String
    resumeId String

    // Analysis metadata
    fileName         String
    processingTimeMs Int?

    // Scores
    overallScore  Int
    atsScore      Int
    scoreCategory String
    mainRoast     String

    // Analysis results (JSON storage for flexibility)
    analysisData Json // Complete analysis response

    // Status & Credits
    creditsUsed Int     @default(0)
    isCompleted Boolean @default(false)

    // Timestamps
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
    resume             Resume              @relation(fields: [resumeId], references: [id], onDelete: Cascade)
    creditTransactions CreditTransaction[]
    improvements       Improvement[]

    // Crucial indexes for dashboard queries
    @@index([userId, isCompleted, createdAt(sort: Desc)])
    @@index([resumeId, isCompleted, createdAt(sort: Desc)])
    @@index([userId, resumeId, isCompleted])
    @@map("analyses")
}

// ===== RESUME IMPROVEMENTS =====
model Improvement {
    id         String  @id @default(cuid())
    userId     String
    resumeId   String
    analysisId String? // Optional: link to original analysis

    // Improvement parameters
    targetRole     String
    targetIndustry String

    // Generated content
    improvedResumeData Json // Complete improved resume data
    improvementSummary String? // Summary of changes made

    // File output
    generatedFileUrl String? // UploadThing URL for generated resume

    // Status & Credits
    creditsUsed      Int     @default(0)
    isCompleted      Boolean @default(false)
    processingTimeMs Int?

    // Timestamps
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
    resume             Resume              @relation(fields: [resumeId], references: [id], onDelete: Cascade)
    analysis           Analysis?           @relation(fields: [analysisId], references: [id])
    creditTransactions CreditTransaction[]

    @@index([userId, createdAt(sort: Desc)])
    @@index([resumeId, createdAt(sort: Desc)])
    @@index([analysisId])
    @@map("improvements")
}

// ===== VERSIONED IMPROVED RESUMES =====
model ImprovedResume {
    id       String @id @default(cuid())
    userId   String
    resumeId String

    // Versioning
    version     Int
    versionName String? // Optional user-defined name for this version

    // Improvement parameters
    targetRole     String
    targetIndustry String
    customPrompt   String? // Additional custom instructions from user

    // Generated content
    improvedResumeData Json // Complete improved resume data
    improvementSummary String? // AI-generated summary of changes made
    keyChanges         Json? // Structured list of key changes made

    // Quality metrics
    originalScore         Int? // Original resume score
    improvedScore         Int? // Estimated improved score
    improvementPercentage Float? // Percentage improvement

    // File output
    generatedFileUrl String? // UploadThing URL for generated resume PDF
    fileName         String? // Generated file name

    // Processing details
    creditsUsed      Int     @default(0)
    processingTimeMs Int?
    modelUsed        String? // AI model used (for future tracking)

    // Status & metadata
    isCompleted Boolean @default(false)
    isActive    Boolean @default(true) // Can be soft deleted
    isFavorite  Boolean @default(false) // User can mark favorites

    // Timestamps
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
    resume             Resume              @relation(fields: [resumeId], references: [id], onDelete: Cascade)
    creditTransactions CreditTransaction[]
    comparisons        ResumeComparison[]  @relation("ImprovedResumeComparisons")

    // Ensure version uniqueness per resume
    @@unique([resumeId, version])
    // Performance indexes for dashboard
    @@index([userId, isCompleted, createdAt(sort: Desc)])
    @@index([resumeId, isCompleted, createdAt(sort: Desc)])
    @@index([userId, isActive, isFavorite])
    @@map("improved_resumes")
}

// ===== RESUME VERSION COMPARISONS =====
model ResumeComparison {
    id String @id @default(cuid())

    // Comparison details
    userId           String
    originalResumeId String
    improvedResumeId String
    comparisonType   ComparisonType

    // Comparison results
    comparisonData Json // Detailed comparison results
    summary        String? // AI-generated summary of differences

    // Metadata
    isActive Boolean @default(true)

    // Timestamps
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    originalResume Resume         @relation(fields: [originalResumeId], references: [id], onDelete: Cascade)
    improvedResume ImprovedResume @relation("ImprovedResumeComparisons", fields: [improvedResumeId], references: [id], onDelete: Cascade)

    @@map("resume_comparisons")
}

enum ComparisonType {
    VERSION_TO_VERSION // Comparing two improved versions
    ORIGINAL_TO_IMPROVED // Comparing original to improved
    BULK_COMPARISON // Comparing multiple versions
}

// ===== SUBSCRIPTION & BILLING =====
model Subscription {
    id     String @id @default(cuid())
    userId String

    // Subscription details
    planId   String // References to your pricing plans
    planName String
    status   SubscriptionStatus

    // Billing
    priceId        String? // Stripe price ID
    customerId     String? // Stripe customer ID
    subscriptionId String? // Stripe subscription ID

    // Credits
    monthlyCredits Int // Credits included in plan

    // Billing cycle
    currentPeriodStart DateTime?
    currentPeriodEnd   DateTime?

    // Timestamps
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    canceledAt DateTime?

    // Relations
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId, status, createdAt(sort: Desc)])
    @@index([status, currentPeriodEnd])
    @@map("subscriptions")
}

enum SubscriptionStatus {
    ACTIVE
    CANCELED
    PAST_DUE
    INCOMPLETE
    INCOMPLETE_EXPIRED
    TRIALING
    UNPAID
}

// ===== USAGE TRACKING & ANALYTICS =====
model UsageEvent {
    id     String  @id @default(cuid())
    userId String?

    // Event details
    eventType   UsageEventType
    description String?
    metadata    Json? // Additional event data

    // Context
    ipAddress String?
    userAgent String?

    // Timestamps
    createdAt DateTime @default(now())

    // Relations
    user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

    @@map("usage_events")
}

enum UsageEventType {
    SIGNUP
    LOGIN
    RESUME_UPLOAD
    ANALYSIS_START
    ANALYSIS_COMPLETE
    IMPROVEMENT_START
    IMPROVEMENT_COMPLETE
    CREDIT_PURCHASE
    SUBSCRIPTION_START
    SUBSCRIPTION_CANCEL
    FILE_DOWNLOAD
}

// ===== SYSTEM CONFIGURATION =====
model SystemConfig {
    id    String @id @default(cuid())
    key   String @unique
    value String

    // Metadata
    description String?
    category    String?

    // Timestamps
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("system_config")
}

// ===== PRICING PLANS =====
model PricingPlan {
    id String @id @default(cuid())

    // Plan details
    name        String  @unique
    description String?

    // Credits & Features
    monthlyCredits     Int
    analysisCredits    Int @default(1) // Credits per analysis
    improvementCredits Int @default(2) // Credits per improvement

    // Pricing
    price    Decimal @db.Decimal(10, 2)
    currency String  @default("USD")

    // Features
    features Json // List of plan features

    // Status
    isActive  Boolean @default(true)
    isPopular Boolean @default(false)

    // Timestamps
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("pricing_plans")
}

// ===== FEEDBACK & SUPPORT =====
model Feedback {
    id     String  @id @default(cuid())
    userId String?

    // Feedback details
    type    FeedbackType
    subject String?
    message String
    rating  Int?         @db.SmallInt // 1-5 rating

    // Context
    page      String? // Which page feedback was left on
    userAgent String?

    // Status
    status     FeedbackStatus @default(OPEN)
    adminNotes String?

    // Timestamps
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    resolvedAt DateTime?

    // Relations
    user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

    @@map("feedback")
}

enum FeedbackType {
    BUG_REPORT
    FEATURE_REQUEST
    GENERAL_FEEDBACK
    SUPPORT_REQUEST
}

enum FeedbackStatus {
    OPEN
    IN_PROGRESS
    RESOLVED
    CLOSED
}

// ===== WAITLIST (for future features) =====
model WaitlistEntry {
    id    String @id @default(cuid())
    email String @unique

    // Details
    firstName String?
    lastName  String?
    company   String?
    role      String?

    // Source tracking
    source   String? // How they found us
    referrer String? // Referring URL

    // Status
    isNotified Boolean @default(false)

    // Timestamps
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    notifiedAt DateTime?

    @@map("waitlist_entries")
}

// ===== MODEL CONFIGURATION SYSTEM =====
model ModelConfiguration {
    id          String  @id @default(cuid())
    name        String  @unique
    description String?

    // Model settings
    provider  String // "openai", "anthropic", etc.
    modelName String
    apiKey    String?
    baseUrl   String?

    // Configuration
    temperature      Float? @default(0.7)
    maxTokens        Int?   @default(4000)
    topP             Float? @default(1.0)
    frequencyPenalty Float? @default(0.0)
    presencePenalty  Float? @default(0.0)

    // Status
    isActive  Boolean @default(true)
    isDefault Boolean @default(false)
    version   Int     @default(1)

    // Timestamps
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    createdBy String? // Admin user who created this

    // Relations
    prompts ModelPrompt[]

    @@map("model_configurations")
}

model ModelPrompt {
    id              String @id @default(cuid())
    configurationId String

    // Prompt details
    name         String
    promptType   PromptType
    systemPrompt String?
    userPrompt   String?
    description  String?

    // Template support
    templateVariables Json?

    // Testing & versioning
    testGroup String?
    version   Int     @default(1)
    isActive  Boolean @default(true)

    // Timestamps
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    createdBy String? // Admin user who created this

    // Relations
    configuration ModelConfiguration @relation(fields: [configurationId], references: [id], onDelete: Cascade)

    @@unique([configurationId, promptType, name])
    @@map("model_prompts")
}

enum PromptType {
    SYSTEM
    USER
    TEMPLATE
}

// ===== MPESA PAYMENT SYSTEM =====
model MpesaPayment {
    id     String @id @default(cuid())
    userId String // Internal database user ID
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    // Package details (same as Stripe)
    packageType String // 'pro', 'trial', etc.
    credits     Int // Number of credits to award

    // Payment details
    amount               Float // Amount in MZN
    customerMsisdn       String // Customer's phone number
    transactionReference String @unique // Our transaction reference
    thirdPartyReference  String @unique // Our unique third party reference

    // MPesa tracking
    mpesaConversationId      String? @unique // MPesa conversation ID from C2B response
    mpesaTransactionId       String? @unique // MPesa transaction ID when completed
    mpesaResponseCode        String? // MPesa response code
    mpesaResponseDescription String? // MPesa response description

    // Status and timestamps
    status    PaymentStatus @default(PENDING)
    createdAt DateTime      @default(now())
    updatedAt DateTime      @updatedAt

    @@index([userId, createdAt(sort: Desc)])
    @@index([status])
    @@map("mpesa_payments")
}

enum PaymentStatus {
    PENDING // Payment initiated, waiting for user confirmation
    COMPLETED // Payment successfully completed
    FAILED // Payment failed
    EXPIRED // Payment expired (user didn't confirm in time)
    CANCELLED // Payment cancelled by user
}
